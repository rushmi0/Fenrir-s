name: Build JVM 21

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ขั้นตอนที่ 1: ตรวจสอบโค้ดจาก repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # ขั้นตอนที่ 2: ตั้งค่า Docker Compose สำหรับการทดสอบ
      # * https://github.com/marketplace/actions/docker-compose-with-tests-action?version=v1.5.0
      - name: Build Docker Image
        uses: adambirds/docker-compose-action@v1.5.0
        with:
          up-flags: relay-db

      # ขั้นตอนที่ 3: ติดตั้ง JVM
      # * https://github.com/marketplace/actions/setup-java-jdk?version=v4.5.0
      - name: Set up JDK 21
        uses: actions/setup-java@v4.5.0
        with:
          java-version: 21
          distribution: temurin

      # ขั้นตอนที่ 4: ตรวจสอบเวอร์ชันของ JVM
      - name: Verify JVM
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          java --version          

      # ขั้นตอนที่ 5: แก้ไขค่าในไฟล์ .env สำหรับการใช้งาน
      - name: Update .env Configuration
        run: |
          sed -i 's/#DATABASE_URL=jdbc:postgresql:\/\/localhost:5432/DATABASE_URL=jdbc:postgresql:\/\/localhost:5432/' .env
          sed -i 's/DATABASE_URL=jdbc:postgresql:\/\/relay-db:5432/#DATABASE_URL=jdbc:postgresql:\/\/relay-db:5432/' .env

      # ขั้นตอนที่ 6: Compile โค้ด
      - name: Build Project
        run: ./gradlew build -x test

      # ขั้นตอนที่ 7: ตรวจสอบว่าไฟล์ jar ถูกสร้างขึ้นแล้ว
      - name: Check Build Output
        run: |
          if [ -f build/libs/fenrir-s-1.0-all-optimized.jar ]; then
            echo "Build successful!"
          else
            echo "Build failed!"
            exit 1
          fi 
          
          
